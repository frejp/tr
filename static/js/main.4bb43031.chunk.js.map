{"version":3,"sources":["ducks/registration/registration.ts","designTokens.ts","components/FormikInput/styled.tsx","components/FormikInput/FormikInput.tsx","components/Link/Link.tsx","components/Tabs/Tabs.tsx","components/TabRouterComponent/TabRouterComponent.tsx","components/Messages/FormErrorMessage.tsx","components/Headings/SmallHeading.tsx","components/Buttons/PrimaryButton.tsx","components/Wrappers/Wrapper.ts","ducks/RootReducer.ts","routes/Registration/routes/Privacy/Privacy.tsx","routes/Registration/routes/Done/Done.tsx","routes/Registration/routes/RegistrationForm/styled.tsx","components/Label/Label.tsx","routes/Registration/routes/RegistrationForm/RegistrationForm.tsx","components/StepRoute/StepRoute.tsx","routes/Registration/Registration.router.tsx","App.router.tsx","index.tsx"],"names":["setNextRoute","createAction","nextRouterPathPayLoad","payload","setFinishedForm","formPayload","setPrivacy","privacyPayload","registrationReducer","createReducer","registrationForm","name","role","password","email","shouldReceiveUpdates","shouldReceiveCommunication","nextRouterPath","SET_FINISHED_FORM","state","action","SET_PRIVACY","SET_NEXT_ROUTE","designTokens","placeHolderCss","css","focusedInput","inputBaseCSS","DynamicTextInput","styled","input","props","error","FormikInput","id","placeholder","type","useField","field","meta","helpers","hasError","touched","onBlur","setTouched","onChange","value","FormErrorMessage","color","NeutralLink","Link","flex","bgcolor","TabWrapper","div","Tab","Tabs","routerPaths","location","useLocation","map","path","i","isCurrentPath","pathname","includes","routerPath","key","to","text","Wrapper","FlexWrapper","TabRouterComponent","children","textAlign","PrimaryButton","button","FormWrapper","rootReducer","combineReducers","registration","useTypedSelector","useSelector","InputWrapper","Label","label","Privacy","dispatch","useDispatch","history","useHistory","reDirectMessage","registrationFormState","useState","setShouldReceiveUpdates","setShouldReceiveCommunication","onSubmit","e","preventDefault","push","checked","htmlFor","SuccessText","Done","registrationState","console","log","JSON","stringify","data-testid","BoxWrapper","SpacingYSmall","a","emptyFormInitialValues","validationSchema","yup","shape","required","notRequired","matches","RegistrationForm","formInitialValues","initialValues","formData","StepRoute","Component","component","shouldGoToNextStep","redirectPathName","render","routeToStep","RegistrationRouter","exact","store","configureStore","reducer","App","basename","process","ReactDOM","document","getElementById"],"mappings":"4MAmDaA,EAAeC,YAAa,kBAAkB,SACzDC,GAEA,MAAO,CACLC,QAASD,MAIAE,EAAkBH,YAAa,qBAAqB,SAAiBI,GAChF,MAAO,CACLF,QAASE,MAIAC,EAAaL,YAAa,eAAe,SAAiBM,GACrE,MAAO,CACLJ,QAASI,MAoBAC,GAhBqBP,YAAa,wBAEZA,YAAa,gCAcbQ,YAZM,CACvCC,iBAAkB,CAChBC,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,MAAO,IAETC,sBAAsB,EACtBC,4BAA4B,EAC5BC,eAAgB,sBAG6C,CAC7DC,kBAAmB,SAACC,EAAOC,GAAR,sBACdD,EADc,CAEjBT,iBAAiB,eACZU,EAAOjB,YAGdkB,YAAa,SAACF,EAAOC,GAAR,sBACRD,EADQ,GAERC,EAAOjB,UAEZmB,eAAgB,SAACH,EAAOC,GAAR,sBACXD,EADW,GAEXC,EAAOjB,a,QCnGDoB,EACN,UADMA,EAEY,qB,2sCCCzB,IAAMC,EAAiBC,YAAH,KAOdC,EAAeD,YAAH,KASZE,EAAeF,YAAH,KAoBLG,EAAmBC,IAAOC,MAAV,KAClB,SAACC,GAAD,OAAYA,EAAMC,MAAQT,EAAmB,WACtC,SAACQ,GAAD,OAAYA,EAAMC,MAAQT,EAAmB,SAC3DI,EAGEH,GACO,SAACO,GAAD,OAAYA,EAAMC,MAAQT,EAAmBA,KACpC,SAACQ,GAAD,OAAYA,EAAMC,MAAQT,EAAmBA,IAK7DC,GACO,SAACO,GAAD,OAAYA,EAAMC,MAAQT,EAAmBA,KAChC,SAACQ,GAAD,OAAYA,EAAMC,MAAQT,EAAmBA,IAKjEG,GACW,SAACK,GAAD,OAAYA,EAAMC,MAAQT,EAAmB,WACpC,SAACQ,GAAD,OAAYA,EAAMC,MAAQT,EAAmB,WC/C1DU,EAAc,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,GAAIvB,EAA2C,EAA3CA,KAAMwB,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAwB,EAC5CC,YAAS,CAAE1B,SADiC,mBACpE2B,EADoE,KAC7DC,EAD6D,KACvDC,EADuD,KAErEC,IAAaF,EAAKP,MAExB,OACE,6BACE,kBAACJ,EAAD,CACEI,MAAOO,EAAKG,SAAWD,EACvBP,GAAIA,EACJvB,KAAM2B,EAAM3B,KACZgC,OAAQ,WACNH,EAAQI,YAAW,IAErBC,SAAUP,EAAMO,SAChBV,YAAaA,EACbC,KAAMA,EACNU,MAAOR,EAAMQ,QAEdP,EAAKG,SAAWH,EAAKP,MAAQ,kBAACe,EAAD,CAAkBC,MAAOzB,GAAmBgB,EAAKP,OAA4B,O,wPCzB1G,IAAMiB,EAAcpB,YAAOqB,IAAPrB,CAAH,KAEb,SAACE,GAAD,OAAWA,EAAMiB,SAQlB,SAACjB,GAAD,OAAWA,EAAMoB,QACL,SAACpB,GAAD,OAAWA,EAAMqB,W,6RCbhC,IAAMC,EAAaxB,IAAOyB,IAAV,KAOVC,EAAM1B,IAAOyB,IAAV,KAaHE,EAAwB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChCC,EAAWC,cAEjB,OACE,kBAACN,EAAD,KACGI,EAAYG,KAAI,SAACC,EAAkBC,GAClC,IAAMC,EAAgBL,EAASM,SAASC,SAASJ,EAAKK,YACtD,OACE,kBAACjB,EAAD,CAAakB,IAAKL,EAAGV,QAASW,EAAgB,OAAS,QAASf,MAAM,QAAQG,KAAK,IAAIiB,GAAIP,EAAKK,YAC9F,kBAACX,EAAD,KAAMM,EAAKQ,Y,uRCrBvB,IAAMC,EAAUzC,IAAOyB,IAAV,KAMPiB,EAAc1C,IAAOyB,IAAV,KAMJkB,EAAqB,SAACzC,GACjC,OACE,kBAACwC,EAAD,KACE,kBAACD,EAAD,KACE,kBAAC,EAAD,CAAMb,YAAa1B,EAAM0B,cACzB,6BAAM1B,EAAM0C,a,6TCxBb,IAAM1B,EAAmBlB,IAAOyB,IAAV,KAClB,SAACvB,GAAD,OAAWA,EAAMiB,SACZ,SAACjB,GAAD,OAAWA,EAAM2C,a,6aCPL7C,IAAOyB,IAAV,K,ipBCAlB,IAAMqB,EAAgB9C,IAAO+C,OAAV,K,oHCAnB,IAAMC,EAAchD,IAAOyB,IAAV,K,QCGXwB,EAAcC,0BAAgB,CACzCC,aAAcxE,IAKHyE,EAAoDC,I,0TCC1D,IAAMC,GAAetD,IAAOyB,IAAV,MAOZ8B,GAAQvD,IAAOwD,MAAV,KAWLC,GAAoB,WAAO,IAAD,IAC/BC,EAAwBC,cACxBC,EAA2CC,cAC3CC,EAAe,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAS/B,gBAAZ,iBAAG,EAAmBvC,aAAtB,aAAG,EAA0BwE,gBAC5CC,EAAwBX,GAAiB,SAAC9D,GAAD,OAAWA,EAAM6D,gBAJ3B,EAOmBa,mBAASD,EAAsB7E,sBAPlD,mBAO9BA,EAP8B,KAOR+E,EAPQ,OAQ+BD,mBAClED,EAAsB5E,4BATa,mBAQ9BA,EAR8B,KAQF+E,EARE,KAgCrC,OACE,oCACGJ,EAAkB,kBAAC5C,EAAD,CAAkBC,MAAOzB,GAAmBoE,GAAsC,KACrG,kBAACd,EAAD,KACE,0BAAMmB,SAhBS,SAACC,GACpBA,EAAEC,iBACFX,EACEjF,EAAW,CACTS,uBACAC,gCAGJuE,EAASvF,EAAa,CAAEiB,eAAgB,wBACxCwE,EAAQU,KAAR,YAQM,kBAAChB,GAAD,KACE,2BACEiB,QAASrF,EACTmB,GAAG,iBACHvB,KAAK,iBACLkC,SA9BiB,WAC3BiD,GAAyB/E,IA8BfqB,KAAK,aAEP,kBAACgD,GAAD,CAAOiB,QAAQ,kBAAf,mDAEF,kBAAClB,GAAD,KACE,2BACEiB,QAASpF,EACTkB,GAAG,uBACHvB,KAAK,uBACLkC,SApCuB,WACjCkD,GAA+B/E,IAoCrBoB,KAAK,aAEP,kBAACgD,GAAD,CAAOiB,QAAQ,wBAAf,8EAIF,kBAAC1B,EAAD,CAAevC,KAAK,UAApB,c,4GCpFH,IAAMkE,GAAczE,IAAOyB,IAAV,MAKXiD,GAAO,WAClB,IAAMC,EAAoBvB,GAAiB,SAAC9D,GAAD,OAAWA,EAAM6D,gBACpDtE,EAAuE8F,EAAvE9F,iBAAkBM,EAAqDwF,EAArDxF,2BAA4BD,EAAyByF,EAAzBzF,qBAMtD,OAJA0F,QAAQC,IAAI,uBACZD,QAAQC,IAAIC,KAAKC,UAAU,CAAElG,mBAAkBM,6BAA4BD,0BAC3E0F,QAAQC,IAAI,uBAGV,kBAACJ,GAAD,CAAaO,cAAY,UAAzB,wF,+2BCjBG,IAAMC,GAAajF,IAAOyB,IAAV,MAcVyD,IANWlF,IAAOyB,IAAV,MAMQzB,IAAOyB,IAAV,OAMIzB,IAAOmF,EAAV,MAGhB,SAACjF,GAAD,OAAWA,EAAMiB,SAWMnB,IAAOyB,IAAV,M,0FC/BxB,IAAM8B,GAAQvD,IAAOwD,MAAV,MCgBZ4B,GAAmC,CACvCtG,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,MAAO,IAGHoG,GAAmBC,OAAaC,MAAM,CAC1CzG,KAAMwG,OAAaE,WACnBzG,KAAMuG,OAAaG,cACnBxG,MAAOqG,OAEJrG,QACAuG,SAAS,mCACZxG,SAAUsG,OAEPE,SAAS,yBACTE,QACC,8CACA,+GAQOC,GAA6B,WAAO,IAAD,IACxC/B,EAA2CC,cAC3CC,EAAe,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAS/B,gBAAZ,iBAAG,EAAmBvC,aAAtB,aAAG,EAA0BwE,gBAC5CC,EAAwBX,GAAiB,SAAC9D,GAAD,OAAWA,EAAM6D,aAAatE,oBACvE+G,EAAoB7B,EAAsB9E,MAAQ8E,EAAwBqB,GAE1E1B,EAAwBC,cAQ9B,OACE,oCACGG,EAAkB,kBAAC5C,EAAD,CAAkBC,MAAOzB,GAAmBoE,GAAsC,KACrG,kBAAC,IAAD,CAAQ+B,cAAeD,EAAmBzB,SATzB,SAAC2B,GACpBpC,EAASnF,EAAgBuH,IACzBpC,EAASvF,EAAa,CAAEiB,eAAgB,2BACxCwE,EAAQU,KAAR,cAMoEe,iBAAkBA,IAClF,kBAAC,IAAD,KACE,kBAACJ,GAAD,KACE,kBAACC,GAAD,MACA,kBAAC,GAAD,CAAOV,QAAQ,QAAf,QACA,kBAAC,EAAD,CAAanE,GAAG,OAAOvB,KAAK,OAAOwB,YAAY,cAAcC,KAAK,SAClE,kBAAC,GAAD,CAAOiE,QAAQ,QAAf,QACA,kBAAC,EAAD,CAAanE,GAAG,OAAOvB,KAAK,OAAOwB,YAAY,cAAcC,KAAK,SAClE,kBAAC,GAAD,CAAOiE,QAAQ,SAAf,SACA,kBAAC,EAAD,CAAanE,GAAG,QAAQvB,KAAK,QAAQwB,YAAY,cAAcC,KAAK,UACpE,kBAAC,GAAD,CAAOiE,QAAQ,YAAf,YACA,kBAAC,EAAD,CAAanE,GAAG,WAAWvB,KAAK,WAAWwB,YAAY,iBAAiBC,KAAK,aAC7E,kBAACuC,EAAD,CAAevC,KAAK,UAApB,eCnECwF,GAA6B,SAAC,GAAoE,IAAvDC,EAAsD,EAAjEC,UAAsBC,EAA2C,EAA3CA,mBAAoBC,EAAuB,EAAvBA,iBACrF,OACE,kBAAC,IAAD,CACEC,OAAQ,SAAClG,GACP,OAAIgG,EACK,kBAACF,EAAc9F,GAGtB,kBAAC,IAAD,CACEqC,GAAI,CACFJ,SAAUgE,EACV7G,MAAO,CAAEwE,gBAAiB,qCCNlCuC,GAAc,CAClB,qBAAsB,EACtB,wBAAyB,EACzB,qBAAsB,GAGlBzE,GAAc,CAClB,CAAEY,KAAM,OAAQH,WAAY,sBAC5B,CAAEG,KAAM,UAAWH,WAAY,yBAC/B,CAAEG,KAAM,OAAQH,WAAY,wBAGjBiE,GAA+B,WAC1C,IAAMlH,EAAiBgE,GAAiB,SAAC9D,GAAD,OAAWA,EAAM6D,aAAa/D,kBAChEwE,EAA2CC,cAC3CqC,EAAqBG,GAAYzC,EAAQ/B,SAASM,WAAakE,GAAYjH,GAC3E+G,EAAmB/G,EAEzB,OACE,kBAAC,EAAD,CAAoBwC,YAAaA,IAC/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqE,UAAW,kBAAM,kBAAC,IAAD,CAAU1D,GAAG,wBAAyBgE,OAAK,EAACvE,KAAK,kBACzE,kBAAC,IAAD,CAAOiE,UAAWN,GAAkB3D,KAAK,uBACzC,kBAAC,GAAD,CACEiE,UAAWxC,GACXzB,KAAK,yBACLmE,iBAAkBA,EAClBD,mBAAoBA,IAEtB,kBAAC,GAAD,CACED,UAAWvB,GACX1C,KAAK,sBACLmE,iBAAkBA,EAClBD,mBAAoBA,OCvCxBM,GAAQC,YAAe,CAC3BC,QAASzD,IAsBI0D,GAjBO,WACpB,OACE,kBAAC,IAAD,CAAUH,MAAOA,IACf,kBAAC,IAAD,CAAeI,SAAUC,OACvB,kBAAC,IAAD,CACET,OAAQ,gBAAGvE,EAAH,EAAGA,SAAH,OACN,kBAAC,IAAD,CAAQA,SAAUA,GAChB,kBAAC,IAAD,CAAOoE,UAAW,kBAAM,kBAAC,IAAD,CAAU1D,GAAG,mBAAoBgE,OAAK,EAACvE,KAAK,MACpE,kBAAC,IAAD,CAAOiE,UAAWK,GAAoBtE,KAAK,0BCjBzD8E,IAASV,OAAO,kBAAC,GAAD,MAASW,SAASC,eAAe,U","file":"static/js/main.4bb43031.chunk.js","sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\n\nimport { NextRouterPath } from '../../routes';\n\nexport interface SystemState {\n  registrationForm: {\n    name: string;\n    role: string;\n    password: string;\n    email: string;\n  };\n  shouldReceiveUpdates: boolean;\n  shouldReceiveCommunication: boolean;\n  nextRouterPath: NextRouterPath;\n}\n\ninterface SetFinishedForm {\n  type: typeof setFinishedForm;\n  payload: FormPayLoad;\n}\n\ninterface SetReceivedData {\n  type: typeof toggleReceivedData;\n}\n\ninterface SetPrivacy {\n  type: typeof setPrivacy;\n  payload: PrivacyPayLoad;\n}\n\ninterface SetNextRoute {\n  type: typeof setNextRoute;\n  payload: NextRouterPathPayload;\n}\n\ntype NextRouterPathPayload = {\n  nextRouterPath: NextRouterPath;\n};\n\ntype FormPayLoad = {\n  name: string;\n  role: string;\n  password: string;\n  email: string;\n};\n\ntype PrivacyPayLoad = {\n  shouldReceiveUpdates: boolean;\n  shouldReceiveCommunication: boolean;\n};\n\nexport const setNextRoute = createAction('SET_NEXT_ROUTE', function prepare(\n  nextRouterPathPayLoad: NextRouterPathPayload,\n) {\n  return {\n    payload: nextRouterPathPayLoad,\n  };\n});\n\nexport const setFinishedForm = createAction('SET_FINISHED_FORM', function prepare(formPayload: FormPayLoad) {\n  return {\n    payload: formPayload,\n  };\n});\n\nexport const setPrivacy = createAction('SET_PRIVACY', function prepare(privacyPayload: PrivacyPayLoad) {\n  return {\n    payload: privacyPayload,\n  };\n});\n\nexport const toggleReceivedData = createAction('TOGGLE_RECEIVED_DATA');\n\nexport const toggleCommunication = createAction('TOGGLE_RECEIVE_COMMUNICATION');\n\nexport const initialState: SystemState = {\n  registrationForm: {\n    name: '',\n    role: '',\n    password: '',\n    email: '',\n  },\n  shouldReceiveUpdates: false,\n  shouldReceiveCommunication: false,\n  nextRouterPath: '/registration/form',\n};\n\nexport const registrationReducer = createReducer(initialState, {\n  SET_FINISHED_FORM: (state, action: SetFinishedForm) => ({\n    ...state,\n    registrationForm: {\n      ...action.payload,\n    },\n  }),\n  SET_PRIVACY: (state, action: SetPrivacy) => ({\n    ...state,\n    ...action.payload,\n  }),\n  SET_NEXT_ROUTE: (state, action: SetNextRoute) => ({\n    ...state,\n    ...action.payload,\n  }),\n});\n","// https://css-tricks.com/what-are-design-tokens/\nexport const designTokens = {\n  red: '#d0021b',\n  inputPlaceHolderColor: 'rgb(220, 220, 220)',\n};\n","import styled, { css } from 'styled-components';\n\nimport { designTokens } from '../../designTokens';\n\nconst placeHolderCss = css`\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 0.125em;\n  -webkit-font-smoothing: antialiased;\n`;\n\nconst focusedInput = css`\n  color: black;\n  border-color: black;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: inherit;\n  -webkit-font-smoothing: antialiased;\n`;\n\nconst inputBaseCSS = css`\n  margin: 5px 15px 5px 15px;\n  width: 320px;\n  position: relative;\n  font-size: 14px;\n  line-height: 21px;\n  -webkit-font-smoothing: antialiased;\n  text-transform: none;\n  border-width: 1px;\n  border-style: solid;\n  border-image: initial;\n  padding: 5px 5px;\n  outline: none;\n  box-sizing: border-box;\n`;\n\ninterface DynamicTextInputProps {\n  error: boolean;\n}\n\nexport const DynamicTextInput = styled.input<DynamicTextInputProps>`\n  color: ${(props) => (props.error ? designTokens.red : 'black')};\n  border-color: ${(props) => (props.error ? designTokens.red : 'gray')};\n  ${inputBaseCSS}\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    ${placeHolderCss}\n    color: ${(props) => (props.error ? designTokens.red : designTokens.inputPlaceHolderColor)};\n      border-color: ${(props) => (props.error ? designTokens.red : designTokens.inputPlaceHolderColor)};\n\n    opacity: 0.54\n  }\n  :-ms-input-placeholder {\n    ${placeHolderCss}\n    color: ${(props) => (props.error ? designTokens.red : designTokens.inputPlaceHolderColor)};\n          border-color: ${(props) => (props.error ? designTokens.red : designTokens.inputPlaceHolderColor)};\n    opacity: 0.54\n\n  }\n  :focus-within {\n    ${focusedInput}\n        color: ${(props) => (props.error ? designTokens.red : 'black')};\n          border-color: ${(props) => (props.error ? designTokens.red : 'black')};\n  }\n`;\n","import { useField } from 'formik';\nimport React from 'react';\n\nimport { designTokens } from '../../designTokens';\nimport { DynamicTextInput } from './styled';\n\nimport { FormErrorMessage } from '..';\n\ninterface FormikInput {\n  id: string;\n  name: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const FormikInput = ({ id, name, placeholder, type }: FormikInput) => {\n  const [field, meta, helpers] = useField({ name });\n  const hasError = !!meta.error;\n\n  return (\n    <div>\n      <DynamicTextInput\n        error={meta.touched && hasError}\n        id={id}\n        name={field.name}\n        onBlur={() => {\n          helpers.setTouched(true);\n        }}\n        onChange={field.onChange}\n        placeholder={placeholder}\n        type={type}\n        value={field.value}\n      />\n      {meta.touched && meta.error ? <FormErrorMessage color={designTokens.red}>{meta.error}</FormErrorMessage> : null}\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\ninterface FormErrorMessageProp {\n  flex: string;\n  bgcolor: string;\n}\n\nexport const NeutralLink = styled(Link)<FormErrorMessageProp>`\n  text-decoration: none;\n  color: ${(props) => props.color};\n  &:focus,\n  &:hover,\n  &:visited,\n  &:link,\n  &:active {\n    text-decoration: none;\n  }\n  flex: ${(props) => props.flex};\n  background-color: ${(props) => props.bgcolor};\n`;\n","import styled from 'styled-components';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { NeutralLink } from '../Link';\n\nexport const TabWrapper = styled.div`\n  display: flex;\n  width: 350px;\n  max-width: 350px;\n  margin-bottom: 10px;\n`;\n\nexport const Tab = styled.div`\n  flex: 1;\n  text-align: center;\n  border: 1px solid black;\n`;\n\ninterface RouterPath {\n  text: string;\n  routerPath: string;\n}\ninterface Props {\n  routerPaths: RouterPath[];\n}\nexport const Tabs: React.FC<Props> = ({ routerPaths }) => {\n  const location = useLocation();\n\n  return (\n    <TabWrapper>\n      {routerPaths.map((path: RouterPath, i) => {\n        const isCurrentPath = location.pathname.includes(path.routerPath);\n        return (\n          <NeutralLink key={i} bgcolor={isCurrentPath ? 'grey' : 'white'} color='black' flex='1' to={path.routerPath}>\n            <Tab>{path.text}</Tab>\n          </NeutralLink>\n        );\n      })}\n    </TabWrapper>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Tabs } from '../Tabs/Tabs';\n\ninterface RouterPath {\n  text: string;\n  routerPath: string;\n}\ninterface Props {\n  children: React.ReactNode;\n  routerPaths: RouterPath[];\n}\n\nconst Wrapper = styled.div`\n  background-color: white;\n  padding-top: 10px;\n  width: 350px;\n`;\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const TabRouterComponent = (props: Props) => {\n  return (\n    <FlexWrapper>\n      <Wrapper>\n        <Tabs routerPaths={props.routerPaths} />\n        <div>{props.children}</div>\n      </Wrapper>\n    </FlexWrapper>\n  );\n};\n","import styled from 'styled-components';\n\ninterface FormErrorMessageProp {\n  color?: string;\n  textAlign?: string;\n}\n\nexport const FormErrorMessage = styled.div<FormErrorMessageProp>`\n  color: ${(props) => props.color};\n  text-align: ${(props) => props.textAlign};\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-family: FreightTextProBook-Italic, Georgia, sans-serif;\n  font-size: 14px;\n  line-height: 21px;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 15px;\n`;\n","import styled from 'styled-components';\n\nexport const SmallHeading = styled.div`\n  font-weight: normal;\n  text-transform: uppercase;\n  font-family: SimplonNorm-Bold, Helvetica, sans-serif;\n  font-size: 18px;\n  line-height: 27px;\n  letter-spacing: 0.125em;\n  -webkit-font-smoothing: antialiased;\n  width: 100%;\n  margin: 10px 0px 20px 0px;\n  font-size: 18px;\n  line-height: 27px;\n  letter-spacing: 0.125em;\n  max-width: 350px;\n`;\n","import styled from 'styled-components';\n\nexport const PrimaryButton = styled.button`\n  background-color: white;\n  text-align: center;\n  font-family: SimplonNorm-Bold, Helvetica, sans-serif;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 0.125em;\n  text-transform: uppercase;\n  font-weight: normal;\n  -webkit-font-smoothing: antialiased;\n  color: black;\n  width: 100%;\n  outline: none;\n  text-decoration: none;\n  border-width: 1px;\n  border-style: solid;\n  border-color: black;\n  padding: 15px 0px;\n  margin: 15px;\n  margin-bottom: 5px;\n  width: 320px;\n  :hover {\n    background-color: black;\n    cursor: pointer;\n    color: white;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const FormWrapper = styled.div`\n  width: 350px;\n  background-color: white;\n`;\n","import { combineReducers } from 'redux';\nimport { useSelector, TypedUseSelectorHook } from 'react-redux';\n\nimport { registrationReducer } from './registration';\n\nexport const rootReducer = combineReducers({\n  registration: registrationReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport * as H from 'history';\nimport { useHistory } from 'react-router-dom';\n\nimport { setNextRoute, setPrivacy } from '../../../../ducks/registration';\nimport { AppDispatch } from '../../../../App.router';\nimport { FormWrapper, PrimaryButton, FormErrorMessage } from '../../../../components';\nimport { designTokens } from '../../../../designTokens';\nimport { useTypedSelector } from '../../../../ducks';\n\nexport const InputWrapper = styled.div`\n  margin-left: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  display: flex;\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  margin-left: 6px;\n  margin-top: 0px;\n  margin-right: 4px;\n`;\n\ninterface HistoryLocationState {\n  reDirectMessage?: string;\n}\n\nexport const Privacy: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const history: H.History<HistoryLocationState> = useHistory();\n  const reDirectMessage = history?.location?.state?.reDirectMessage;\n  const registrationFormState = useTypedSelector((state) => state.registration);\n\n  // I differ localstate from -submitted- global state.\n  const [shouldReceiveUpdates, setShouldReceiveUpdates] = useState(registrationFormState.shouldReceiveUpdates);\n  const [shouldReceiveCommunication, setShouldReceiveCommunication] = useState(\n    registrationFormState.shouldReceiveCommunication,\n  );\n\n  const handleReceiveUpdates = () => {\n    setShouldReceiveUpdates(!shouldReceiveUpdates);\n  };\n\n  const handleReceiveCommunication = () => {\n    setShouldReceiveCommunication(!shouldReceiveCommunication);\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    dispatch(\n      setPrivacy({\n        shouldReceiveUpdates,\n        shouldReceiveCommunication,\n      }),\n    );\n    dispatch(setNextRoute({ nextRouterPath: '/registration/done' }));\n    history.push(`./done`);\n  };\n\n  return (\n    <>\n      {reDirectMessage ? <FormErrorMessage color={designTokens.red}>{reDirectMessage}</FormErrorMessage> : null}\n      <FormWrapper>\n        <form onSubmit={handleSubmit}>\n          <InputWrapper>\n            <input\n              checked={shouldReceiveUpdates}\n              id='receiveUpdates'\n              name='receiveUpdates'\n              onChange={handleReceiveUpdates}\n              type='checkbox'\n            />\n            <Label htmlFor='receiveUpdates'>Receive updates about Tray.io product by email</Label>\n          </InputWrapper>\n          <InputWrapper>\n            <input\n              checked={shouldReceiveCommunication}\n              id='receiveCommunication'\n              name='receiveCommunication'\n              onChange={handleReceiveCommunication}\n              type='checkbox'\n            />\n            <Label htmlFor='receiveCommunication'>\n              Receive communication by email for other products created by Tray.io team\n            </Label>\n          </InputWrapper>\n          <PrimaryButton type='submit'>SUBMIT</PrimaryButton>\n        </form>\n      </FormWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useTypedSelector } from '../../../../ducks';\n\nexport const SuccessText = styled.div`\n  color: green;\n  padding: 30px;\n`;\n\nexport const Done = () => {\n  const registrationState = useTypedSelector((state) => state.registration);\n  const { registrationForm, shouldReceiveCommunication, shouldReceiveUpdates } = registrationState;\n\n  console.log('--final JSON data--');\n  console.log(JSON.stringify({ registrationForm, shouldReceiveCommunication, shouldReceiveUpdates }));\n  console.log('--final JSON data--');\n\n  return (\n    <SuccessText data-testid='testID'>\n      Please verify your email address, you should have received an email from us already\n    </SuccessText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const BoxWrapper = styled.div`\n    width: 350px;\n    max-width: 350px;\n    box-sizing: border-box;\n    background-color: white;\n}\n`;\n\nexport const SpacingY = styled.div`\n    width: 100%;\n    height: 60px;\n}\n`;\n\nexport const SpacingYSmall = styled.div`\n    width: 100%;\n    height: 15px;\n}\n`;\n\nexport const ForgotPassword = styled.a`\n  color: #dddddd;\n  font-family: FreightTextProBook-Regular, Georgia, sans-serif;\n  color: ${(props) => props.color};\n  font-size: 14px;\n  line-height: 21px;\n  margin-left: 15px;\n  margin-top: 10px;\n  -webkit-font-smoothing: antialiased;\n  display: inherit;\n  cursor: pointer;\n`;\n\n// just an empty container\nexport const EmptySocialButtons = styled.div`\n  width: 320px;\n  height: 119px;\n  margin-top: 50px;\n`;\n","import styled from 'styled-components';\n\ninterface labelProps {\n  htmlFor: string;\n}\nexport const Label = styled.label<labelProps>`\n  margin: 15px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport * as H from 'history';\n\nimport { AppDispatch } from '../../../../App.router';\nimport { setFinishedForm, setNextRoute, useTypedSelector } from '../../../../ducks';\nimport { FormikInput, PrimaryButton, FormErrorMessage } from '../../../../components';\nimport { BoxWrapper, SpacingYSmall } from './styled';\nimport { Label } from '../../../../components/Label';\nimport { designTokens } from '../../../../designTokens';\n\ninterface FormData {\n  name: string;\n  role: string;\n  password: string;\n  email: string;\n}\n\nconst emptyFormInitialValues: FormData = {\n  name: '',\n  role: '',\n  password: '',\n  email: '',\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  role: yup.string().notRequired(),\n  email: yup\n    .string()\n    .email()\n    .required('please provide an email address'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{9,})/,\n      'Password must contain at least 9 chars, contains at least one number and one lowercase and uppercase char',\n    ),\n});\n\ninterface HistoryLocationState {\n  reDirectMessage?: string;\n}\n\nexport const RegistrationForm: React.FC = () => {\n  const history: H.History<HistoryLocationState> = useHistory();\n  const reDirectMessage = history?.location?.state?.reDirectMessage;\n  const registrationFormState = useTypedSelector((state) => state.registration.registrationForm);\n  const formInitialValues = registrationFormState.email ? registrationFormState : emptyFormInitialValues;\n\n  const dispatch: AppDispatch = useDispatch();\n\n  const handleSubmit = (formData: FormData) => {\n    dispatch(setFinishedForm(formData));\n    dispatch(setNextRoute({ nextRouterPath: '/registration/privacy' }));\n    history.push(`./privacy`);\n  };\n\n  return (\n    <>\n      {reDirectMessage ? <FormErrorMessage color={designTokens.red}>{reDirectMessage}</FormErrorMessage> : null}\n      <Formik initialValues={formInitialValues} onSubmit={handleSubmit} validationSchema={validationSchema}>\n        <Form>\n          <BoxWrapper>\n            <SpacingYSmall />\n            <Label htmlFor='name'>name</Label>\n            <FormikInput id='name' name='name' placeholder='ex John Doe' type='text' />\n            <Label htmlFor='role'>role</Label>\n            <FormikInput id='role' name='role' placeholder='ex DB Admin' type='text' />\n            <Label htmlFor='email'>email</Label>\n            <FormikInput id='email' name='email' placeholder='enter email' type='email' />\n            <Label htmlFor='password'>password</Label>\n            <FormikInput id='password' name='password' placeholder='enter password' type='password' />\n            <PrimaryButton type='submit'>SUBMIT</PrimaryButton>\n          </BoxWrapper>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ninterface Props {\n  component: any;\n  shouldGoToNextStep: boolean;\n  redirectPathName: string;\n  path: any;\n}\n\nexport const StepRoute: React.FC<Props> = ({ component: Component, shouldGoToNextStep, redirectPathName }) => {\n  return (\n    <Route\n      render={(props) => {\n        if (shouldGoToNextStep) {\n          return <Component {...props} />;\n        }\n        return (\n          <Redirect\n            to={{\n              pathname: redirectPathName,\n              state: { reDirectMessage: 'Please finish current step' },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport * as H from 'history';\n\nimport { RegistrationForm, Done, Privacy } from './routes';\nimport { useTypedSelector } from '../../ducks';\nimport { StepRoute } from '../../components/StepRoute/StepRoute';\nimport { TabRouterComponent } from '../../components';\n\ninterface HistoryLocationState {\n  reDirectMessage?: string;\n}\n\nexport type NextRouterPath = '/registration/form' | '/registration/privacy' | '/registration/done';\n\nconst routeToStep = {\n  '/registration/form': 0,\n  '/registration/privacy': 1,\n  '/registration/done': 2,\n};\n\nconst routerPaths = [\n  { text: 'user', routerPath: '/registration/form' },\n  { text: 'privacy', routerPath: '/registration/privacy' },\n  { text: 'done', routerPath: '/registration/done/' },\n];\n\nexport const RegistrationRouter: React.FC = function App() {\n  const nextRouterPath = useTypedSelector((state) => state.registration.nextRouterPath);\n  const history: H.History<HistoryLocationState> = useHistory();\n  const shouldGoToNextStep = routeToStep[history.location.pathname] <= routeToStep[nextRouterPath];\n  const redirectPathName = nextRouterPath;\n\n  return (\n    <TabRouterComponent routerPaths={routerPaths}>\n      <Switch>\n        <Route component={() => <Redirect to='/registration/form' />} exact path='/registration' />\n        <Route component={RegistrationForm} path='/registration/form' />\n        <StepRoute\n          component={Privacy}\n          path='/registration/privacy/'\n          redirectPathName={redirectPathName}\n          shouldGoToNextStep={shouldGoToNextStep}\n        />\n        <StepRoute\n          component={Done}\n          path='/registration/done/'\n          redirectPathName={redirectPathName}\n          shouldGoToNextStep={shouldGoToNextStep}\n        />\n      </Switch>\n    </TabRouterComponent>\n  );\n};\n","import React from 'react';\nimport './index.css';\nimport { Redirect, BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { RegistrationRouter } from './routes';\nimport { rootReducer } from './ducks';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nconst App: React.FC = function App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Route\n          render={({ location }) => (\n            <Switch location={location}>\n              <Route component={() => <Redirect to='/registration' />} exact path='/' />\n              <Route component={RegistrationRouter} path='/registration/' />\n            </Switch>\n          )}\n        />\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App.router';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}